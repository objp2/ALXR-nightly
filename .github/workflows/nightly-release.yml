name: Release ALXR nightly

env:
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch:

jobs:
  prepare_release:
    runs-on: windows-2022
    outputs:
      release_ref: ${{ steps.output_ref.outputs.release_ref }}
      upload_url: ${{ steps.create_alxr_release.outputs.upload_url }}
      release_id: ${{ steps.create_alxr_release.outputs.id }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: "objp2/ALXR"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Generate tag, set release ref
        id: output_ref
        env:
          RUST_BACKTRACE: 1
        run: |
          $out = cargo xtask bump-alxr-versions --nightly
          echo $out
          echo "::set-output name=version_tag::$(echo $out | sls -CaseSensitive -Pattern '^v.*$')"
          echo "::set-output name=release_ref::$(git rev-parse HEAD)"

      - name: Create ALXR Release
        id: create_alxr_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Release tag is taken from the gen_tag job.
          tag_name: ${{ steps.output_ref.outputs.version_tag }}
          release_name:  ${{ steps.output_ref.outputs.version_tag }}
          # TODO: gather commit output_ref to post here in the body
          body: |
            Nightly release of ALXR: ${{ steps.output_ref.outputs.version_tag }}
            Generated from commit: objp2/ALVR@${{ steps.output_ref.outputs.release_ref }}
            
            **Please note:**
            **only server builds here are compatible.**
            **client v0.47 and above must be used with server v18.16 and above**
            **alxr-client.apk for any android based headset except Pico (install alxr-client-pico.apk instead)**
            
          draft: true
          prerelease: false
  
  build_alxr_linux_portable_release:
    runs-on: ubuntu-20.04
    needs: [prepare_release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: "objp2/ALXR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update # && sudo apt upgrade -y

          # ALVR/FFMPEG specific depends.
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev
          # ALXR specific depends.
          sudo apt install git wget gcc-10 g++-10 ninja-build libxxf86vm-dev libxcb-glx0-dev libcjson-dev glslang-dev glslang-tools -y

          # ubuntu-focal cmake package is too old...
          CMAKE_FILE=cmake-3.31.0-linux-x86_64.sh
          wget https://github.com/Kitware/CMake/releases/download/v3.31.0/${CMAKE_FILE}
          chmod +x ${CMAKE_FILE}
          ./${CMAKE_FILE} --skip-license --include-subdir
          export PATH=${PWD}/cmake-3.31.0-linux-x86_64:$PATH
          
          # ubuntu-focal glslang package is too old...
          wget https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-linux-Release.zip
          unzip glslang-master-linux-Release.zip -d glslang
          export PATH=${PWD}/glslang/bin:$PATH

          export CC=/usr/bin/gcc-10
          export CXX=/usr/bin/g++-10

          # Fetch alxr-engine submodule.
          git submodule update --init --recursive
          
          echo "$PATH" >> $GITHUB_PATH
      
      - name: Build & Package ALXR-Release (.tar.gz)
        id: build-release
        env:
          CC: /usr/bin/gcc-10
          CXX: /usr/bin/g++-10
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump-alxr-versions --nightly
          cargo xtask build-alxr-client --release --bundle-ffmpeg --gpl --no-nvidia --ffmpeg-version=release/4.4
          tar -czvf ./build/alxr-client-linux.tar.gz -C ./build/release/alxr_client_linux .
      
      - name: Upload portable alxr-release for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alxr-client-linux.tar.gz
          asset_name: alxr-client-linux.tar.gz
          asset_content_type: application/gzip
  
  build_alxr_linux_portable_debug:
    runs-on: ubuntu-20.04
    needs: [prepare_release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: "objp2/ALXR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update # && sudo apt upgrade -y

          # ALVR/FFMPEG specific depends.
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev
          # ALXR specific depends.
          sudo apt install git wget gcc-10 g++-10 ninja-build libxxf86vm-dev libxcb-glx0-dev libcjson-dev glslang-dev glslang-tools -y

          # ubuntu-focal cmake package is too old...
          CMAKE_FILE=cmake-3.31.0-linux-x86_64.sh
          wget https://github.com/Kitware/CMake/releases/download/v3.31.0/${CMAKE_FILE}
          chmod +x ${CMAKE_FILE}
          ./${CMAKE_FILE} --skip-license --include-subdir
          export PATH=${PWD}/cmake-3.31.0-linux-x86_64:$PATH
          
          # ubuntu-focal glslang package is too old...
          wget https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-linux-Release.zip
          unzip glslang-master-linux-Release.zip -d glslang
          export PATH=${PWD}/glslang/bin:$PATH

          export CC=/usr/bin/gcc-10
          export CXX=/usr/bin/g++-10

          # Fetch alxr-engine submodule.
          git submodule update --init --recursive
          
          echo "$PATH" >> $GITHUB_PATH
            
      - name: Build & Package ALXR-Debug (.tar.gz)
        id: build-debug
        env:
          CC: /usr/bin/gcc-10
          CXX: /usr/bin/g++-10
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump-alxr-versions --nightly
          cargo xtask build-alxr-client --bundle-ffmpeg --gpl --no-nvidia --ffmpeg-version=release/4.4
          tar -czvf ./build/alxr-client-linux-debug.tar.gz -C ./build/debug/alxr_client_linux .
            
      - name: Upload portable alxr-debug for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alxr-client-linux-debug.tar.gz
          asset_name: alxr-client-linux-debug.tar.gz
          asset_content_type: application/gzip
  
  build_alxr_linux_release:
    runs-on: ubuntu-22.04
    needs: [prepare_release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: "objp2/ALXR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build and install ALXR dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update && sudo apt upgrade -y
          # ALVR/FFMPEG specific depends.
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
          # ALXR specific depends.
          sudo apt install git ninja-build libxxf86vm-dev libxcb-glx0-dev libcjson-dev glslang-dev glslang-tools -y

          # Fetch alxr-engine submodule.
          git submodule update --init --recursive
      
      - name: Build & Package ALXR-Release ubuntu-22.04 (.tar.gz)
        id: build-release
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump-alxr-versions --nightly
          # without nvidia/cuda
          cargo xtask build-alxr-client --release --bundle-ffmpeg --gpl --no-nvidia --ffmpeg-version=release/5.1
          tar -czvf ./build/alxr-client-ubuntu-22.04-no-nvidia.tar.gz -C ./build/release/alxr_client_linux .
          # with nvidia/cuda
          cargo xtask build-alxr-client --release --bundle-ffmpeg --gpl --ffmpeg-version=release/5.1
          tar -czvf ./build/alxr-client-ubuntu-22.04.tar.gz -C ./build/release/alxr_client_linux_cuda .
      
      - name: Upload  ubuntu-22.04 alxr-release for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alxr-client-ubuntu-22.04.tar.gz
          asset_name: alxr-client-ubuntu-22.04.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload  ubuntu-22.04 alxr-release-no-nvidia for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alxr-client-ubuntu-22.04-no-nvidia.tar.gz
          asset_name: alxr-client-ubuntu-22.04-no-nvidia.tar.gz
          asset_content_type: application/gzip
  
  build_alxr_linux_debug:
    runs-on: ubuntu-22.04
    needs: [prepare_release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: "objp2/ALXR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build and install ALXR dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update && sudo apt upgrade -y
          # ALVR/FFMPEG specific depends.
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
          # ALXR specific depends.
          sudo apt install git ninja-build libxxf86vm-dev libxcb-glx0-dev libcjson-dev glslang-dev glslang-tools -y

          # Fetch alxr-engine submodule.
          git submodule update --init --recursive
            
      - name: Build & Package ALXR-Debug ubuntu-22.04 (.tar.gz)
        id: build-debug
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump-alxr-versions --nightly
          # without nvidia/cuda
          cargo xtask build-alxr-client --bundle-ffmpeg --gpl --no-nvidia --ffmpeg-version=release/5.1
          tar -czvf ./build/alxr-client-ubuntu-22.04-no-nvidia-debug.tar.gz -C ./build/debug/alxr_client_linux .
          # with nvidia/cuda
          cargo xtask build-alxr-client --bundle-ffmpeg --gpl --ffmpeg-version=release/5.1
          tar -czvf ./build/alxr-client-ubuntu-22.04-debug.tar.gz -C ./build/debug/alxr_client_linux_cuda .
      
      - name: Upload  ubuntu-22.04 alxr-debug for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alxr-client-ubuntu-22.04-debug.tar.gz
          asset_name: alxr-client-ubuntu-22.04-debug.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload  ubuntu-22.04 alxr-debug-no-nvidia for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alxr-client-ubuntu-22.04-no-nvidia-debug.tar.gz
          asset_name: alxr-client-ubuntu-22.04-no-nvidia-debug.tar.gz
          asset_content_type: application/gzip
  
  build_alxr_android_release:
    runs-on: ubuntu-22.04
    needs: [prepare_release]
    env:
      RUST_BACKTRACE: 1
      ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk/28.0.12674087
      ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/28.0.12674087
      ANDROID_CMAKE_BIN: /usr/local/lib/android/sdk/cmake/3.31.0/bin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: "objp2/ALXR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "false"
      - name: Build / Install ALXR Android dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install gcc-multilib
          SDK_MANAGER=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager
          yes | sudo $SDK_MANAGER --install "ndk;28.0.12674087" "platforms;android-29" "cmake;3.31.0"
          
          rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android
          cargo install cargo-apk --git https://github.com/korejan/cargo-apk.git --branch android-manifest-entries

          # Fetch alxr-engine submodule.
          git submodule update --init --recursive

          cargo xtask bump-alxr-versions --nightly
      
      - name: Build & Package alxr-android-generic-release
        run: |
          unset ANDROID_HOME
          JAVA_HOME=$JAVA_HOME_17_X64
          export PATH=$ANDROID_CMAKE_BIN:$PATH
          cargo xtask build-alxr-android --generic --release
          cargo clean
      
      - name: Build & Package alxr-android-pico-release
        run: |
          unset ANDROID_HOME
          JAVA_HOME=$JAVA_HOME_17_X64
          export PATH=$ANDROID_CMAKE_BIN:$PATH
          cargo xtask build-alxr-pico --release
          cargo clean

      - name: Upload alxr-android-generic-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/release/alxr_client_android/alxr-client.apk
          asset_name: alxr-client.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload alxr-android-pico-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/release/alxr_client_android/alxr-client-pico.apk
          asset_name: alxr-client-pico.apk
          asset_content_type: application/vnd.android.package-archive
 
  build_alxr_android_debug:
    runs-on: ubuntu-22.04
    needs: [prepare_release]
    env:
      RUST_BACKTRACE: 1
      ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk/28.0.12674087
      ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/28.0.12674087
      ANDROID_CMAKE_BIN: /usr/local/lib/android/sdk/cmake/3.31.0/bin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: "objp2/ALXR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "false"
            
      - name: Build / Install ALXR Android dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install gcc-multilib
          SDK_MANAGER=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager
          yes | sudo $SDK_MANAGER --install "ndk;28.0.12674087" "platforms;android-29" "cmake;3.31.0"
          
          rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android
          cargo install cargo-apk --git https://github.com/korejan/cargo-apk.git --branch android-manifest-entries
          
          # Fetch alxr-engine submodule.
          git submodule update --init --recursive

          cargo xtask bump-alxr-versions --nightly
      
      - name: Build & Package alxr-android-generic-debug
        run: |
          unset ANDROID_HOME
          JAVA_HOME=$JAVA_HOME_17_X64
          export PATH=$ANDROID_CMAKE_BIN:$PATH
          cargo xtask build-alxr-android --generic
          pushd ./build/debug/alxr_client_android
          mv alxr-client.apk alxr-client-debug.apk
          popd
          cargo clean

      - name: Build & Package alxr-android-pico-debug
        run: |
          unset ANDROID_HOME
          JAVA_HOME=$JAVA_HOME_17_X64
          export PATH=$ANDROID_CMAKE_BIN:$PATH
          cargo xtask build-alxr-pico
          pushd ./build/debug/alxr_client_android
          mv alxr-client-pico.apk alxr-client-pico-debug.apk
          popd
          cargo clean

      - name: Upload alxr-android-generic-debug
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/debug/alxr_client_android/alxr-client-debug.apk
          asset_name: alxr-client-debug.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload alxr-android-pico-debug
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/debug/alxr_client_android/alxr-client-pico-debug.apk
          asset_name: alxr-client-pico-debug.apk
          asset_content_type: application/vnd.android.package-archive
  publish_release:
    runs-on: ubuntu-22.04
    needs:
      [
        prepare_release,
        build_alxr_linux_portable_release,
        build_alxr_linux_portable_debug,
        build_alxr_linux_release,
        build_alxr_linux_debug,
        build_alxr_android_release,
        build_alxr_android_debug,
      ]
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.prepare_release.outputs.release_id }}
